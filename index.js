'number' + 3 + 3  // number33
// Оскільки перший операнд - це рядок, то знак "+" буде сприйматися як конкатенація 
// і другий операнд (як і потім третій) буде приведено до рядка. Тому результатом буде рядок 
// "number33"

null + 3  // 3
// При математичних операціях тип "null" приводиться до числа 0. Тому результатом буде число 3


5 && "qwerty"  // querty
// Оператор && повертає або останній операнд у випадку, якщо всі операнди зводяться до true,
// або перший операнд, який зводиться до false. Оскільки в цьому випадку обидва операнди 
// зводяться до true. то вираз поверне "qwerty"

+'40' + +'2' + "hillel";  // 42hillel
// Спочатку унарний оператор "+" перетворює операнди в числа 40 і 2. Потім додавання виконується
// зліва направо, а тому числа додаються і отримуємо результат 42. Далі зустрічаємо рядом і 
// наступний "+" розглядається як конкатенація і число 42 приводиться до рядка. Як результат 
// два рядки додаються і отримуємо 42hillel

'10' - 5 === 6;  // false
// Спочатку javascript намагається привести рядок "10" до числа 10 і виконати віднімання. 
// В результаті в лівій частині отримуємо 5. Далі йде строге порівняння спочатку за типом
// і оскільки типи однакові, порівняння за значенням. Значення різні, поверне false

true + false  // 1
// Операція додавання намагається булевий тип привести до числа. True приводиться до 1,
// false приводиться до 0. Результат - 1.

'4px' - 3  // NaN
// Операція віднімання намагатиметься привести рядок "4px" до числа, але оскільки він містить
// ще й текст, то результатом буде NaN. І будь-яка математична операція з операндом рівним NaN
// повертає NaN

'4' - 3  // 1
// Операція віднімання намагатиметься привести рядок "4" до числа, і результатом буде число 4. 
// Результатом буде 1.

'6' + 3 ** 0;  // 61
// Піднесення до степеня має вищий пріоритет за додавання, тому спочатку виконується ця операція,
// яка поверне 1. Потім виконається конкатенація рядка 6 із приведеною до рядка 1 і результатом 
// буде 61

12 / '6'  // 2
// Операція ділення спочатку приводить рядок "6" до числа. а потім повертає результат ділення
// чисел 12 і 6 = 2

'10' + (5 === 6); // 10false
// Спочатку виконується операція в дужках. Яка порявняє 5 і 6 спочатку за типом, а потім за
// значенням і поверне false. Потім, оскільки перший операнд - це рядок, виконається конкатенація
// рядка "10" і приведеного до рядка false. Результатом буде 10false

null == ''  // false
// У порівнянні null == '' оператор == не виконує перетворення, оскільки null рівний лише 
// undefined. Порожній рядок ('') не рівний null, результат — false.

3 ** (9 / 3);  // 9
// Операція в дужках має вищій пріорітет, тому спочатку виконається ділення, результатом якого буде
// число 3. Потім 3 піднесено до степеня 3 - результат 9

!!'false' == !!'true'  // true
// Оскільки "false" і "true" - це непорожні рядки, то вони зводяться до true і перший оператор заперечення
// поверне в обох випадках false, а другий поверне в обох випадках true. Нестроге порівняння 
// поверне true

0 || '0' && 1  // 1
// && має вищий пріорітет, тому виконується першим. '0' && 1 - обидва операнди повернуть true,
// а тому повернеться останній операнд - 1. Оператор || поверне перший операнд, який набуває 
// значення true, тобто поверне 1

(+null == false) < 1;  // false
// Оператор "+" приводить null до числа, в цьому випадку до 0. При порівнянні 0 і false, false 
// приводиться до 0 і порівняння 0 == 0 повертає true. Порівняння true<1 приводить true до 1
// і порівняння 1<1 поверне false

false && true || true  // true
// Спочатку виконається оператор && і поверне перший операнд, бо він false. Потім оператор ||
//  порівняє false || true і поверне true, оскільки другий операнд є true

false && (false || true);  // false
//Перша операція виконається в дужках і поверне true. Потім виконається && і поверне false.

(+null == false) < 1 ** 5;
// Спочатку виконається дія в дужках. Оператор "+" приведе null до 0 і далі відбудеться нестроге 
// порівняння. В результаті цього false буде приведено до 0 і результат порівняння 0==0 буде
// true. Після цього відбудеться піднесення до степеня (бо пріорітет), результатом якого буде 1. 
//Надалі відбудеться порівняння true<1, в результаті якого true буде приведено до числа 1.
// Порівняння 1<1 поверне результат false.